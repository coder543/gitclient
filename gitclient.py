#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.0 on Thu Aug 20 14:37:34 2015
#

import wx

# begin wxGlade: dependencies
import gettext
import os
import subprocess
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        os.chdir("/home/kicad/workspace/ardutrainer")
        wx.Frame.__init__(self, *args, **kwds)
        self.commitBtn = wx.Button(self, wx.ID_ANY, _("Commit Changes"))
        self.pushBtn = wx.Button(self, wx.ID_ANY, _("Push Commits"))
        self.pullBtn = wx.Button(self, wx.ID_ANY, _("Pull Commits"))
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)
        self.messageBox = wx.TextCtrl(self.window_1, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)
        self.fileBox = wx.TreeCtrl(self.window_1, wx.ID_ANY, style=wx.TR_MULTIPLE | wx.TR_HIDE_ROOT | wx.TR_HAS_BUTTONS)

        self.updateFileBox()
        self.addMessage("Retrieved git status\n")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.commitClicked, self.commitBtn)
        self.Bind(wx.EVT_BUTTON, self.pushClicked, self.pushBtn)
        self.Bind(wx.EVT_BUTTON, self.pullClicked, self.pullBtn)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.fileSelected, self.fileBox)
        # end wxGlade

    def updateFileBox(self):
        self.fileBox.DeleteAllItems()
        status = ""
        try:
            status = subprocess.check_output(["git", "status", "-s"], stderr=subprocess.STDOUT)
            #self.addMessage(status)
        except subprocess.CalledProcessError as e:
            self.addMessage(e.output)

        root = self.fileBox.AddRoot('')

        if (status == ""):
            self.fileBox.SetItemBold(self.fileBox.AppendItem(root, "No changes to be committed."))
            self.commitBtn.Disable()
            return

        addedFiles          = [x[3:] for x in status.split('\n') if 'A' in x[0:2]]
        changedFiles        = [x[3:] for x in status.split('\n') if 'M' in x[0:2]]
        renamedFiles        = [x[3:] for x in status.split('\n') if 'R' in x[0:2]]
        deletedFiles        = [x[3:] for x in status.split('\n') if 'D' in x[0:2]]
        self.untrackedFiles = [x[3:] for x in status.split('\n') if '?' in x[0:2]]


        if len(self.untrackedFiles) > 0:
            self.fileBox.SetItemBold(self.fileBox.AppendItem(root, "-- Changes To Ignore --"))
            group = self.fileBox.AppendItem(root, "Untracked Files")
            for line in self.untrackedFiles:
                    self.fileBox.AppendItem(group, line)

        comchange = self.fileBox.AppendItem(root, "-- Changes To Commit --")
        self.fileBox.SetItemBold(comchange)
        isChange = False
        if len(addedFiles) > 0:
            isChange = True
            group = self.fileBox.AppendItem(root, 'Added Files')
            for line in addedFiles:
                    self.fileBox.AppendItem(group, line)

        if len(changedFiles) > 0:
            isChange = True
            group = self.fileBox.AppendItem(root, 'Modified Files')
            for line in changedFiles:
                    self.fileBox.AppendItem(group, line)

        if len(renamedFiles) > 0:
            isChange = True
            group = self.fileBox.AppendItem(root, 'Renamed Files')
            for line in renamedFiles:
                    self.fileBox.AppendItem(group, line)

        if len(deletedFiles) > 0:
            isChange = True
            group = self.fileBox.AppendItem(root, 'Deleted Files')
            for line in deletedFiles:
                    self.fileBox.AppendItem(group, line)

        if not isChange:
            self.fileBox.Delete(comchange)
            self.commitBtn.Disable()
        else:
            self.commitBtn.Enable()

        self.fileBox.ExpandAll()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Git Client"))
        self.SetSize((737, 384))
        self.Center()
        self.window_1.SetMinimumPaneSize(20)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.commitBtn, 0, wx.ALL, 5)
        sizer_3.Add(self.pushBtn, 0, wx.ALL, 5)
        sizer_3.Add(self.pullBtn, 0, wx.ALL, 5)
        sizer_2.Add(sizer_3, 0, 0, 0)
        self.window_1.SplitVertically(self.messageBox, self.fileBox, 400)
        sizer_2.Add(self.window_1, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade'

    def addMessage(self, message):
        if len(message) > 0:
            self.messageBox.SetValue(self.messageBox.GetValue() + message + "\n")

    def showError(self, errorMsg):
        self.addMessage(errorMsg)
        wx.MessageBox(errorMsg)

    def commitClicked(self, event):  # wxGlade: MyFrame.<event_handler>
        dlg = wx.TextEntryDialog(None, "Enter a commit message", defaultValue="")
        dlg.ShowModal()
        result = dlg.GetValue()
        dlg.Destroy()
        if result == "":
            self.showError("Error: You have to type a commit message.")
        else:
            try:
                self.addMessage(subprocess.check_output(["git", "commit", "-am", result], stderr=subprocess.STDOUT))
            except subprocess.CalledProcessError as e:
                self.addMessage(e.output)
            self.updateFileBox()
        event.Skip()

    def pullClicked(self, event):  # wxGlade: MyFrame.<event_handler>
        try:
            self.addMessage(subprocess.check_output(["git", "pull"], stderr=subprocess.STDOUT))
        except subprocess.CalledProcessError as e:
            self.addMessage(e.output)
        event.Skip()

    def pushClicked(self, event):  # wxGlade: MyFrame.<event_handler>
        try:
            self.addMessage(subprocess.check_output(["git", "push"], stderr=subprocess.STDOUT))
            self.addMessage("done.")
        except subprocess.CalledProcessError as e:
            self.addMessage(e.output)
        event.Skip()

    def fileSelected(self, event):  # wxGlade: MyFrame.<event_handler>
        filename = self.fileBox.GetItemText(event.GetItem())
        category = self.fileBox.GetItemText(self.fileBox.GetItemParent(event.GetItem()))
        if category == 'Untracked Files':
            try:
                subprocess.check_output(["git", "add", filename], stderr=subprocess.STDOUT)
                self.addMessage("added '" + filename + "'")
                self.updateFileBox()
            except subprocess.CalledProcessError as e:
                self.addMessage(e.output)
        elif category == 'Added Files':
            try:
                subprocess.check_output(["git", "rm", "--cached", filename], stderr=subprocess.STDOUT)
                self.addMessage("undid addition of '" + filename + "'")
                self.updateFileBox()
            except subprocess.CalledProcessError as e:
                self.addMessage(e.output)
        event.Skip()

# end of class MyFrame
class gitclientCls(wx.App):
    def OnInit(self):
        #wx.InitAllImageHandlers()
        frame_1 = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class gitclientCls

if __name__ == "__main__":
    gettext.install("gitclient") # replace with the appropriate catalog name

    gitclient = gitclientCls(0)
    gitclient.MainLoop()
